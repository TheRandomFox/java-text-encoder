USE CASES:
1.	Accepts String key input (optional, default = "A")
2.	Accepts String plaintext input, displays encoded String output.
3.	Accepts encoded String input, displays decoded String output.
		
CLASSES:
1.	public class Encoder
		Attributes:
			String plainText
			String encodedText
			String key
		
		// key.toUpper()
		// check key against Cypher.isValidChar()
		// If invalid character, deny key value.
		
		Methods:
			public String encode (String plainText, String key) {
				// Pass key to Cypher.generateCypher() to get encoded cypher table.
				// Loop:
					// Check if inputs contain characters not in table using Cypher.isValidChar()
					// If Cypher.isValidChar() == False, concat character to output String as-is.
					// 
				return key+encodedText;
			}
			
			public String decode (String encodedText, String key) {
				// Converts encodedText to plainText using Cypher class.
				// Loop:
					// Check if inputs contain characters not in table using Cypher.isValidChar()
					
				return plainText;
			}

2.	public class Cypher
		Attributes:
			String key
			static final String tableDefault //initialised
			String tableEncoded
		
		Methods:
			boolean isValidChar (String inputChar) {
				// Check if tableDefault.contains(inputChar)
				return bool;
			}
		
			String generateCypher (String key) {
				// Generates tableEncoded String
				// Find offset 'distance' by locating index of given key (case-insensitive) within tableDefault and shifting positions of chars accordingly into new String.
				return tableEncoded;
			}
			
==========

TEST CASES:
1a.	// Normal encode function 1
	Inputs:
		key: "B"
		plainText: "HELLO WORLD"
	Expected output: "BGDKKN VNQKC"
	
1b. // Normal encode function 2
	Inputs:
		key: "Q"
		plainText: "HELLO WORLD"
	Expected output: "Q96++. G.B+5"
	
2.	// Case-sensitivity
	Inputs:
		key: "b"
		plainText: "hello world"
	Expected output: "BGDKKN VNQKC"
	
3.	// Invalid chars in plainText input
	Inputs:
		key: "A"
		plainText: "!@#$%^&"
	Expected output: "A!@#$%^&"
	
4.	// Invalid key input
	Inputs:
		key: "?"
		plainText: "HELLO WORLD"
	Expected output: "Error: Invalid key."
	
5a.	// Normal decode function 1
	Inputs:
		encodedText: "BGDKKN VNQKC"
	Expected output: "HELLO WORLD"
	
5b.	// Normal decode function 2
	Inputs:
		encodedText: "Q96++. G.B+5"
	Expected output: "HELLO WORLD"
	
6.	// Invalid chars in encodedText input
	Inputs:
		encodedText: "!@#$%^&"
	Expected output: "!@#$%^&"